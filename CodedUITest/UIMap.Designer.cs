// ------------------------------------------------------------------------------
//  <auto-generated>
//      Этот код был создан построителем кодированных тестов ИП.
//      Версия: 14.0.0.0
//
//      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
//      утрачены при повторном формировании кода.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Start
        /// </summary>
        public void Start()
        {
            #region Variable Declarations
            WinEdit uIИмяEdit = this.UIDebugWindow.UIItemWindow.UIUiFormsexeListItem.UIИмяEdit;
            #endregion

            // Двойной щелчок "Имя" надпись
            Mouse.DoubleClick(uIИмяEdit, new Point(60, 12));
        }
        
        /// <summary>
        /// Close
        /// </summary>
        public void Close()
        {
            #region Variable Declarations
            WinButton uIЗакрытьButton = this.UIMainWindow.UIMainTitleBar.UIЗакрытьButton;
            #endregion

            // Щелкните "Закрыть" кнопка
            Mouse.Click(uIЗакрытьButton, new Point(25, 3));
        }
        
        /// <summary>
        /// AddSquats - Используйте "AddSquatsParams" для передачи параметров в этот метод.
        /// </summary>
        public void AddSquats()
        {
            #region Variable Declarations
            WinList uILbAllList = this.UIMainWindow.UILbAllWindow.UILbAllList;
            WinButton uIItemButton = this.UIMainWindow.UIItemWindow.UIItemButton;
            #endregion

            // Выберите "Squats" в "LbAll" список
            uILbAllList.SelectedItemsAsString = this.AddSquatsParams.UILbAllListSelectedItemsAsString;

            // Щелкните ">" кнопка
            Mouse.Click(uIItemButton, new Point(20, 13));
        }
        
        /// <summary>
        /// PressStart
        /// </summary>
        public void PressStart()
        {
            #region Variable Declarations
            WinButton uIStartTrainingButton = this.UIMainWindow.UIStartTrainingWindow.UIStartTrainingButton;
            #endregion

            // Щелкните "Start Training" кнопка
            Mouse.Click(uIStartTrainingButton, new Point(56, 15));
        }
        
        /// <summary>
        /// RemoveSquats - Используйте "RemoveSquatsParams" для передачи параметров в этот метод.
        /// </summary>
        public void RemoveSquats()
        {
            #region Variable Declarations
            WinList uILbSelectedList = this.UIMainWindow.UILbSelectedWindow.UILbSelectedList;
            WinButton uIItemButton = this.UIMainWindow.UIItemWindow1.UIItemButton;
            #endregion

            // Выберите "Squats" в "LbSelected" список
            uILbSelectedList.SelectedItemsAsString = this.RemoveSquatsParams.UILbSelectedListSelectedItemsAsString;

            // Щелкните "<" кнопка
            Mouse.Click(uIItemButton, new Point(37, 9));
        }
        
        /// <summary>
        /// AssertMessageCantStart - Используйте "AssertMessageCantStartExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertMessageCantStart()
        {
            #region Variable Declarations
            WinEdit uITbMessageEdit = this.UIMainWindow.UITbMessageWindow.UITbMessageEdit;
            #endregion

            // Убедитесь, что свойство Text "TbMessage" надпись равняется "Can't start. Select exercise"
            Assert.AreEqual(this.AssertMessageCantStartExpectedValues.UITbMessageEditText, uITbMessageEdit.Text);
        }
        
        /// <summary>
        /// AssertStarted - Используйте "AssertStartedExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertStarted()
        {
            #region Variable Declarations
            WinEdit uITbMessageEdit = this.UIMainWindow.UITbMessageWindow.UITbMessageEdit;
            #endregion

            // Убедитесь, что свойство Text "TbMessage" надпись равняется "Training Started"
            Assert.AreEqual(this.AssertStartedExpectedValues.UITbMessageEditText, uITbMessageEdit.Text);
        }
        
        /// <summary>
        /// AssertSelectedEmpty - Используйте "AssertSelectedEmptyExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertSelectedEmpty()
        {
            #region Variable Declarations
            WinList uILbSelectedList = this.UIMainWindow.UILbSelectedWindow.UILbSelectedList;
            #endregion

            // Убедитесь, что свойство SelectedItemsAsString "LbSelected" список равняется "0"
            Assert.AreEqual(this.AssertSelectedEmptyExpectedValues.UILbSelectedListSelectedItemsAsString, uILbSelectedList.Items.Count.ToString());
        }
        
        /// <summary>
        /// AssertSelectedOne - Используйте "AssertSelectedOneExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertSelectedOne()
        {
            #region Variable Declarations
            WinList uILbSelectedList = this.UIMainWindow.UILbSelectedWindow.UILbSelectedList;
            #endregion

            // Убедитесь, что свойство SelectedItemsAsString "LbSelected" список равняется "1"
            Assert.AreEqual(this.AssertSelectedOneExpectedValues.UILbSelectedListSelectedItemsAsString, uILbSelectedList.Items.Count.ToString());
        }
        
        #region Properties
        public virtual AddSquatsParams AddSquatsParams
        {
            get
            {
                if ((this.mAddSquatsParams == null))
                {
                    this.mAddSquatsParams = new AddSquatsParams();
                }
                return this.mAddSquatsParams;
            }
        }
        
        public virtual RemoveSquatsParams RemoveSquatsParams
        {
            get
            {
                if ((this.mRemoveSquatsParams == null))
                {
                    this.mRemoveSquatsParams = new RemoveSquatsParams();
                }
                return this.mRemoveSquatsParams;
            }
        }
        
        public virtual AssertMessageCantStartExpectedValues AssertMessageCantStartExpectedValues
        {
            get
            {
                if ((this.mAssertMessageCantStartExpectedValues == null))
                {
                    this.mAssertMessageCantStartExpectedValues = new AssertMessageCantStartExpectedValues();
                }
                return this.mAssertMessageCantStartExpectedValues;
            }
        }
        
        public virtual AssertStartedExpectedValues AssertStartedExpectedValues
        {
            get
            {
                if ((this.mAssertStartedExpectedValues == null))
                {
                    this.mAssertStartedExpectedValues = new AssertStartedExpectedValues();
                }
                return this.mAssertStartedExpectedValues;
            }
        }
        
        public virtual AssertSelectedEmptyExpectedValues AssertSelectedEmptyExpectedValues
        {
            get
            {
                if ((this.mAssertSelectedEmptyExpectedValues == null))
                {
                    this.mAssertSelectedEmptyExpectedValues = new AssertSelectedEmptyExpectedValues();
                }
                return this.mAssertSelectedEmptyExpectedValues;
            }
        }
        
        public virtual AssertSelectedOneExpectedValues AssertSelectedOneExpectedValues
        {
            get
            {
                if ((this.mAssertSelectedOneExpectedValues == null))
                {
                    this.mAssertSelectedOneExpectedValues = new AssertSelectedOneExpectedValues();
                }
                return this.mAssertSelectedOneExpectedValues;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIMainWindow UIMainWindow
        {
            get
            {
                if ((this.mUIMainWindow == null))
                {
                    this.mUIMainWindow = new UIMainWindow();
                }
                return this.mUIMainWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddSquatsParams mAddSquatsParams;
        
        private RemoveSquatsParams mRemoveSquatsParams;
        
        private AssertMessageCantStartExpectedValues mAssertMessageCantStartExpectedValues;
        
        private AssertStartedExpectedValues mAssertStartedExpectedValues;
        
        private AssertSelectedEmptyExpectedValues mAssertSelectedEmptyExpectedValues;
        
        private AssertSelectedOneExpectedValues mAssertSelectedOneExpectedValues;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIMainWindow mUIMainWindow;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AddSquats"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class AddSquatsParams
    {
        
        #region Fields
        /// <summary>
        /// Выберите "Squats" в "LbAll" список
        /// </summary>
        public string UILbAllListSelectedItemsAsString = "Squats";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "RemoveSquats"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class RemoveSquatsParams
    {
        
        #region Fields
        /// <summary>
        /// Выберите "Squats" в "LbSelected" список
        /// </summary>
        public string UILbSelectedListSelectedItemsAsString = "Squats";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertMessageCantStart"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class AssertMessageCantStartExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TbMessage" надпись равняется "Can't start. Select exercise"
        /// </summary>
        public string UITbMessageEditText = "Can\'t start. Select exercise";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertStarted"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class AssertStartedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TbMessage" надпись равняется "Training Started"
        /// </summary>
        public string UITbMessageEditText = "Training Started";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertSelectedEmpty"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class AssertSelectedEmptyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство SelectedItemsAsString "LbSelected" список равняется "0"
        /// </summary>
        public string UILbSelectedListSelectedItemsAsString = "0";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertSelectedOne"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class AssertSelectedOneExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство SelectedItemsAsString "LbSelected" список равняется "1"
        /// </summary>
        public string UILbSelectedListSelectedItemsAsString = "1";
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Просмотр элементов";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIUiFormsexeListItem UIUiFormsexeListItem
        {
            get
            {
                if ((this.mUIUiFormsexeListItem == null))
                {
                    this.mUIUiFormsexeListItem = new UIUiFormsexeListItem(this);
                }
                return this.mUIUiFormsexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUiFormsexeListItem mUIUiFormsexeListItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIUiFormsexeListItem : WinListItem
    {
        
        public UIUiFormsexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UiForms.exe";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UIИмяEdit
        {
            get
            {
                if ((this.mUIИмяEdit == null))
                {
                    this.mUIИмяEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUIИмяEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Имя";
                    this.mUIИмяEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUIИмяEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIИмяEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIMainWindow : WinWindow
    {
        
        public UIMainWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Main";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Main");
            #endregion
        }
        
        #region Properties
        public UIMainTitleBar UIMainTitleBar
        {
            get
            {
                if ((this.mUIMainTitleBar == null))
                {
                    this.mUIMainTitleBar = new UIMainTitleBar(this);
                }
                return this.mUIMainTitleBar;
            }
        }
        
        public UILbAllWindow UILbAllWindow
        {
            get
            {
                if ((this.mUILbAllWindow == null))
                {
                    this.mUILbAllWindow = new UILbAllWindow(this);
                }
                return this.mUILbAllWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIStartTrainingWindow UIStartTrainingWindow
        {
            get
            {
                if ((this.mUIStartTrainingWindow == null))
                {
                    this.mUIStartTrainingWindow = new UIStartTrainingWindow(this);
                }
                return this.mUIStartTrainingWindow;
            }
        }
        
        public UILbSelectedWindow UILbSelectedWindow
        {
            get
            {
                if ((this.mUILbSelectedWindow == null))
                {
                    this.mUILbSelectedWindow = new UILbSelectedWindow(this);
                }
                return this.mUILbSelectedWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UITbMessageWindow UITbMessageWindow
        {
            get
            {
                if ((this.mUITbMessageWindow == null))
                {
                    this.mUITbMessageWindow = new UITbMessageWindow(this);
                }
                return this.mUITbMessageWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMainTitleBar mUIMainTitleBar;
        
        private UILbAllWindow mUILbAllWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIStartTrainingWindow mUIStartTrainingWindow;
        
        private UILbSelectedWindow mUILbSelectedWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UITbMessageWindow mUITbMessageWindow;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIMainTitleBar : WinTitleBar
    {
        
        public UIMainTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.WindowTitles.Add("Main");
            #endregion
        }
        
        #region Properties
        public WinButton UIЗакрытьButton
        {
            get
            {
                if ((this.mUIЗакрытьButton == null))
                {
                    this.mUIЗакрытьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIЗакрытьButton.SearchProperties[WinButton.PropertyNames.Name] = "Закрыть";
                    this.mUIЗакрытьButton.WindowTitles.Add("Main");
                    #endregion
                }
                return this.mUIЗакрытьButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIЗакрытьButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UILbAllWindow : WinWindow
    {
        
        public UILbAllWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "LbAll";
            this.WindowTitles.Add("Main");
            #endregion
        }
        
        #region Properties
        public WinList UILbAllList
        {
            get
            {
                if ((this.mUILbAllList == null))
                {
                    this.mUILbAllList = new WinList(this);
                    #region Условия поиска
                    this.mUILbAllList.WindowTitles.Add("Main");
                    #endregion
                }
                return this.mUILbAllList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUILbAllList;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Choose";
            this.WindowTitles.Add("Main");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = ">";
                    this.mUIItemButton.WindowTitles.Add("Main");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIStartTrainingWindow : WinWindow
    {
        
        public UIStartTrainingWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "BtnStart";
            this.WindowTitles.Add("Main");
            #endregion
        }
        
        #region Properties
        public WinButton UIStartTrainingButton
        {
            get
            {
                if ((this.mUIStartTrainingButton == null))
                {
                    this.mUIStartTrainingButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIStartTrainingButton.SearchProperties[WinButton.PropertyNames.Name] = "Start Training";
                    this.mUIStartTrainingButton.WindowTitles.Add("Main");
                    #endregion
                }
                return this.mUIStartTrainingButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIStartTrainingButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UILbSelectedWindow : WinWindow
    {
        
        public UILbSelectedWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "LbSelected";
            this.WindowTitles.Add("Main");
            #endregion
        }
        
        #region Properties
        public WinList UILbSelectedList
        {
            get
            {
                if ((this.mUILbSelectedList == null))
                {
                    this.mUILbSelectedList = new WinList(this);
                    #region Условия поиска
                    this.mUILbSelectedList.WindowTitles.Add("Main");
                    #endregion
                }
                return this.mUILbSelectedList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUILbSelectedList;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Main");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "<";
                    this.mUIItemButton.WindowTitles.Add("Main");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UITbMessageWindow : WinWindow
    {
        
        public UITbMessageWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TbMessage";
            this.WindowTitles.Add("Main");
            #endregion
        }
        
        #region Properties
        public WinEdit UITbMessageEdit
        {
            get
            {
                if ((this.mUITbMessageEdit == null))
                {
                    this.mUITbMessageEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITbMessageEdit.WindowTitles.Add("Main");
                    #endregion
                }
                return this.mUITbMessageEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITbMessageEdit;
        #endregion
    }
}
